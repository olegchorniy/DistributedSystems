package kpi.ipt.labs.distributed.twophasecommit;

import kpi.ipt.labs.distributed.twophasecommit.domain.HotelBooking;
import kpi.ipt.labs.distributed.twophasecommit.service.impl.jdbc.Utils;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;

public class MySqlTest {

    static {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
            throw new RuntimeException(ex);
        }
    }

    public static void main(String[] args) throws SQLException {
        Connection connection = Utils.getConnection(BookingConnections.mysqlHotelConnectionInfo);
        connection.setAutoCommit(true);

        try (PreparedStatement statement = Utils.withAutoGeneratedKeys(connection, "INSERT " +
                "INTO hotel_bookings (client_name, hotel_name, arrival, departure)" +
                "VALUES (?, ?, ?, ?)")) {

            HotelBooking hotelBooking = Main.getValidHotelBookingInstance();

            statement.setString(1, hotelBooking.getClientName());
            statement.setString(2, hotelBooking.getHotelName());
            statement.setDate(3, Utils.toSqlDate(hotelBooking.getArrival()));
            statement.setDate(4, Utils.toSqlDate(hotelBooking.getDeparture()));

            statement.executeUpdate();

            System.out.println(Utils.extractGeneratedId(1, statement));
        }
    }

    public static void xaTest(String[] args) throws SQLException {

        Connection connection = Utils.getConnection(BookingConnections.mysqlHotelConnectionInfo);
        connection.setAutoCommit(false);

        issueCommand(connection, "XA START 'xatest'");

        try (PreparedStatement statement = connection.prepareStatement("INSERT INTO key_value(value) VALUES (?)")) {
            statement.setString(1, "value_1");
            statement.executeUpdate();
        }

        issueCommand(connection, "XA END 'xatest'");
        issueCommand(connection, "XA PREPARE 'xatest'");
        issueCommand(connection, "XA COMMIT 'xatest'");
        issueCommand(connection, "XA ROLLBACK 'xatest'");

        connection.close();
    }

    private static void issueCommand(Connection connection, String command) throws SQLException {
        try (Statement statement = connection.createStatement()) {
            statement.execute(command);
        }
    }
}
